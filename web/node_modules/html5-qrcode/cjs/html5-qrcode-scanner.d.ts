import { QrcodeSuccessCallback, QrcodeErrorCallback } from "./core";
import { Html5QrcodeConfigs, Html5QrcodeCameraScanConfig } from "./html5-qrcode";
interface Html5QrcodeScannerConfig extends Html5QrcodeCameraScanConfig, Html5QrcodeConfigs {
    rememberLastUsedCamera?: boolean | undefined;
}
export declare class Html5QrcodeScanner {
    private elementId;
    private config;
    private verbose;
    private currentScanType;
    private sectionSwapAllowed;
    private persistedDataManager;
    private logger;
    private html5Qrcode;
    private qrCodeSuccessCallback;
    private qrCodeErrorCallback;
    private lastMatchFound;
    private cameraScanImage;
    private fileScanImage;
    constructor(elementId: string, config: Html5QrcodeScannerConfig | undefined, verbose: boolean | undefined);
    render(qrCodeSuccessCallback: QrcodeSuccessCallback, qrCodeErrorCallback: QrcodeErrorCallback | undefined): void;
    clear(): Promise<void>;
    private createConfig;
    private createBasicLayout;
    private resetBasicLayout;
    private setupInitialDashboard;
    private createHeader;
    private createSection;
    private createCameraListUi;
    private createPermissionButton;
    private createPermissionsUi;
    private createSectionControlPanel;
    private renderCameraSelection;
    private createSectionSwap;
    private resetHeaderMessage;
    private setHeaderMessage;
    private showHideScanTypeSwapLink;
    private insertCameraScanImageToScanRegion;
    private insertFileScanImageToScanRegion;
    private clearScanRegion;
    private getDashboardSectionId;
    private getDashboardSectionCameraScanRegionId;
    private getDashboardSectionFileScanRegionId;
    private getDashboardSectionSwapLinkId;
    private getScanRegionId;
    private getDashboardId;
    private getFileScanInputId;
    private getStatusSpanId;
    private getHeaderMessageContainerId;
    private getCameraSelectionId;
    private getCameraScanRegion;
    private getFileScanRegion;
    private getFileScanInput;
    private getDashboardSectionSwapLink;
    private getHeaderMessageDiv;
}
export {};
